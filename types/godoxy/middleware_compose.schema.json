{"$schema":"http://json-schema.org/draft-07/schema#","definitions":{"CIDR":{"type":["string"]},"Duration":{"description":"Duration","pattern":"^\\d+(?:us|ms|s|m|h|d|w|M)$","type":"string"},"HTTPHeader":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"LooseUse<\"cidr_whitelist\">":{"const":"cidr_whitelist","type":"string"},"LooseUse<\"cloudflare_real_ip\">":{"const":"cloudflare_real_ip","type":"string"},"LooseUse<\"forward_auth\">":{"const":"forward_auth","type":"string"},"LooseUse<\"hide_x_forwarded\">":{"const":"hide_x_forwarded","type":"string"},"LooseUse<\"modify_html\">":{"const":"modify_html","type":"string"},"LooseUse<\"oidc\">":{"const":"oidc","type":"string"},"LooseUse<\"rate_limit\">":{"const":"rate_limit","type":"string"},"LooseUse<\"real_ip\">":{"const":"real_ip","type":"string"},"LooseUse<\"redirect_http\">":{"const":"redirect_http","type":"string"},"LooseUse<\"set_x_forwarded\">":{"const":"set_x_forwarded","type":"string"},"LooseUse<\"themed\">":{"const":"themed","type":"string"},"LooseUse<(\"error_page\"|\"custom_error_page\")>":{"enum":["error_page","custom_error_page"],"type":"string"},"LooseUse<(\"modify_request\"|\"request\")>":{"enum":["modify_request","request"],"type":"string"},"LooseUse<(\"modify_response\"|\"response\")>":{"enum":["modify_response","response"],"type":"string"},"MiddlewareCompose":{"additionalProperties":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"error_page","enum":["error_page","custom_error_page"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"redirect_http","const":"redirect_http","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"set_x_forwarded","const":"set_x_forwarded","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"hide_x_forwarded","const":"hide_x_forwarded","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"allow":{"items":{"type":["string"]},"type":"array"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"message":{"default":"IP not allowed","description":"Block message","type":"string"},"status":{"default":403,"description":"HTTP status code","maximum":599,"minimum":100,"type":["number","string"]},"status_code":{"default":403,"description":"HTTP status code","maximum":599,"minimum":100,"type":["number","string"]},"use":{"description":"cidr_whitelist","const":"cidr_whitelist","type":"string"}},"required":["allow","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"cloudflare_real_ip","const":"cloudflare_real_ip","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"add_headers":{"description":"Add HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"add_prefix":{"description":"Add prefix to request URL","type":"string"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"hide_headers":{"description":"Hide HTTP headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"set_headers":{"description":"Set HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"use":{"description":"modify_request","enum":["modify_request","request"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"add_headers":{"description":"Add HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"hide_headers":{"description":"Hide HTTP headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"set_headers":{"description":"Set HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"use":{"description":"modify_response","enum":["modify_response","response"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"allowed_groups":{"description":"Allowed groups","items":{"type":"string"},"minItems":1,"type":"array"},"allowed_users":{"description":"Allowed users","items":{"type":"string"},"minItems":1,"type":"array"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"oidc","const":"oidc","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"average":{"description":"Average number of requests allowed in a period","type":"number"},"burst":{"description":"Maximum number of requests allowed in a period","type":"number"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"period":{"default":"1s","description":"Duration of the rate limit","pattern":"^\\d+(?:us|ms|s|m|h|d|w|M)$","type":"string"},"use":{"description":"rate_limit","const":"rate_limit","type":"string"}},"required":["average","burst","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"from":{"items":{"type":["string"]},"type":"array"},"header":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string","default":"X-Real-IP"},"recursive":{"default":false,"description":"Recursive resolve the IP","type":"boolean"},"use":{"description":"real_ip","const":"real_ip","type":"string"}},"required":["from","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"html":{"description":"HTML to modify","type":"string"},"replace":{"default":false,"description":"Replace HTML","type":"boolean"},"target":{"description":"CSS Selector","type":"string"},"use":{"description":"modify_html","const":"modify_html","type":"string"}},"required":["html","target","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"css":{"description":"Custom CSS","type":"string"},"font_family":{"description":"Font family","type":"string"},"font_url":{"description":"Font URL","type":"string"},"theme":{"description":"Predefined themes","enum":["dark","dark-grey","solarized-dark"],"type":"string"},"use":{"description":"themed","const":"themed","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"auth_endpoint":{"default":"/api/auth/traefik","description":"Auth endpoint","type":"string"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"headers":{"default":["Remote-User","Remote-Name","Remote-Email","Remote-Groups"],"description":"Additional response headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"route":{"default":"tinyauth","description":"Auth route name","type":"string"},"use":{"description":"forward_auth","const":"forward_auth","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"type":"string"}},"required":["use"],"type":"object"}]},"type":"array"},"type":"object"},"MiddlewareComposeItem":{"anyOf":[{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"error_page","enum":["error_page","custom_error_page"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"redirect_http","const":"redirect_http","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"set_x_forwarded","const":"set_x_forwarded","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"hide_x_forwarded","const":"hide_x_forwarded","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"allow":{"items":{"type":["string"]},"type":"array"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"message":{"default":"IP not allowed","description":"Block message","type":"string"},"status":{"default":403,"description":"HTTP status code","maximum":599,"minimum":100,"type":["number","string"]},"status_code":{"default":403,"description":"HTTP status code","maximum":599,"minimum":100,"type":["number","string"]},"use":{"description":"cidr_whitelist","const":"cidr_whitelist","type":"string"}},"required":["allow","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"cloudflare_real_ip","const":"cloudflare_real_ip","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"add_headers":{"description":"Add HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"add_prefix":{"description":"Add prefix to request URL","type":"string"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"hide_headers":{"description":"Hide HTTP headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"set_headers":{"description":"Set HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"use":{"description":"modify_request","enum":["modify_request","request"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"add_headers":{"description":"Add HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"hide_headers":{"description":"Hide HTTP headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"set_headers":{"description":"Set HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"use":{"description":"modify_response","enum":["modify_response","response"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"allowed_groups":{"description":"Allowed groups","items":{"type":"string"},"minItems":1,"type":"array"},"allowed_users":{"description":"Allowed users","items":{"type":"string"},"minItems":1,"type":"array"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"oidc","const":"oidc","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"average":{"description":"Average number of requests allowed in a period","type":"number"},"burst":{"description":"Maximum number of requests allowed in a period","type":"number"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"period":{"default":"1s","description":"Duration of the rate limit","pattern":"^\\d+(?:us|ms|s|m|h|d|w|M)$","type":"string"},"use":{"description":"rate_limit","const":"rate_limit","type":"string"}},"required":["average","burst","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"from":{"items":{"type":["string"]},"type":"array"},"header":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string","default":"X-Real-IP"},"recursive":{"default":false,"description":"Recursive resolve the IP","type":"boolean"},"use":{"description":"real_ip","const":"real_ip","type":"string"}},"required":["from","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"html":{"description":"HTML to modify","type":"string"},"replace":{"default":false,"description":"Replace HTML","type":"boolean"},"target":{"description":"CSS Selector","type":"string"},"use":{"description":"modify_html","const":"modify_html","type":"string"}},"required":["html","target","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"css":{"description":"Custom CSS","type":"string"},"font_family":{"description":"Font family","type":"string"},"font_url":{"description":"Font URL","type":"string"},"theme":{"description":"Predefined themes","enum":["dark","dark-grey","solarized-dark"],"type":"string"},"use":{"description":"themed","const":"themed","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"auth_endpoint":{"default":"/api/auth/traefik","description":"Auth endpoint","type":"string"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"headers":{"default":["Remote-User","Remote-Name","Remote-Email","Remote-Groups"],"description":"Additional response headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"route":{"default":"tinyauth","description":"Auth route name","type":"string"},"use":{"description":"forward_auth","const":"forward_auth","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"type":"string"}},"required":["use"],"type":"object"}]},"MiddlewareFileRef":{"type":"string"},"OptionalPattern<string>":{"type":["string"]},"Record<HTTPHeader,string>":{"additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"RuleOn":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"RuleOnBasicAuth":{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},"RuleOnCookie":{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},"RuleOnForm":{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},"RuleOnHeader":{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},"RuleOnHost":{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},"RuleOnMethod":{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},"RuleOnPath":{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},"RuleOnPostForm":{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},"RuleOnQuery":{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},"RuleOnRemote":{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},"RuleOnResponseHeader":{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]},"RuleOnRoute":{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},"RuleOnStatusCode":{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},"StatusCode":{"description":"Status code","maximum":599,"minimum":100,"type":["number","string"]}},"additionalProperties":{"items":{"anyOf":[{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"error_page","enum":["error_page","custom_error_page"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"redirect_http","const":"redirect_http","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"set_x_forwarded","const":"set_x_forwarded","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"hide_x_forwarded","const":"hide_x_forwarded","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"allow":{"items":{"type":["string"]},"type":"array"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"message":{"default":"IP not allowed","description":"Block message","type":"string"},"status":{"default":403,"description":"HTTP status code","maximum":599,"minimum":100,"type":["number","string"]},"status_code":{"default":403,"description":"HTTP status code","maximum":599,"minimum":100,"type":["number","string"]},"use":{"description":"cidr_whitelist","const":"cidr_whitelist","type":"string"}},"required":["allow","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"cloudflare_real_ip","const":"cloudflare_real_ip","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"add_headers":{"description":"Add HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"add_prefix":{"description":"Add prefix to request URL","type":"string"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"hide_headers":{"description":"Hide HTTP headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"set_headers":{"description":"Set HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"use":{"description":"modify_request","enum":["modify_request","request"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"add_headers":{"description":"Add HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"hide_headers":{"description":"Hide HTTP headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"set_headers":{"description":"Set HTTP headers","additionalProperties":{"type":"string"},"propertyNames":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$"},"type":"object"},"use":{"description":"modify_response","enum":["modify_response","response"],"type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"allowed_groups":{"description":"Allowed groups","items":{"type":"string"},"minItems":1,"type":"array"},"allowed_users":{"description":"Allowed users","items":{"type":"string"},"minItems":1,"type":"array"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"description":"oidc","const":"oidc","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"average":{"description":"Average number of requests allowed in a period","type":"number"},"burst":{"description":"Maximum number of requests allowed in a period","type":"number"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"period":{"default":"1s","description":"Duration of the rate limit","pattern":"^\\d+(?:us|ms|s|m|h|d|w|M)$","type":"string"},"use":{"description":"rate_limit","const":"rate_limit","type":"string"}},"required":["average","burst","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"from":{"items":{"type":["string"]},"type":"array"},"header":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string","default":"X-Real-IP"},"recursive":{"default":false,"description":"Recursive resolve the IP","type":"boolean"},"use":{"description":"real_ip","const":"real_ip","type":"string"}},"required":["from","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"html":{"description":"HTML to modify","type":"string"},"replace":{"default":false,"description":"Replace HTML","type":"boolean"},"target":{"description":"CSS Selector","type":"string"},"use":{"description":"modify_html","const":"modify_html","type":"string"}},"required":["html","target","use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"css":{"description":"Custom CSS","type":"string"},"font_family":{"description":"Font family","type":"string"},"font_url":{"description":"Font URL","type":"string"},"theme":{"description":"Predefined themes","enum":["dark","dark-grey","solarized-dark"],"type":"string"},"use":{"description":"themed","const":"themed","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"auth_endpoint":{"default":"/api/auth/traefik","description":"Auth endpoint","type":"string"},"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"headers":{"default":["Remote-User","Remote-Name","Remote-Email","Remote-Groups"],"description":"Additional response headers","items":{"description":"HTTP Header","pattern":"^[a-zA-Z0-9\\-]+$","type":"string"},"type":"array"},"route":{"default":"tinyauth","description":"Auth route name","type":"string"},"use":{"description":"forward_auth","const":"forward_auth","type":"string"}},"required":["use"],"type":"object"},{"additionalProperties":false,"properties":{"bypass":{"description":"Bypass rules","items":{"anyOf":[{"description":"header {key} [{value}]\n\nWhen value is provided, match the request header with the given key and value pattern. Otherwise, match the request header when the given key exists.","examples":["header Content-Type","header Content-Type application/json"],"type":["string"]},{"description":"query {key} [{value}]\n\nWhen value is provided, match the request query with the given key and value pattern. Otherwise, match the request query when the given key exists.","examples":["query key","query key value"],"type":["string"]},{"description":"cookie {key} [{value}]\n\nWhen value is provided, match the request cookie with the given key and value pattern. Otherwise, match the request cookie when the given key exists.","examples":["cookie key","cookie key value"],"type":["string"]},{"description":"form {key} [{value}]\n\nWhen value is provided, match the request form with the given key and value pattern. Otherwise, match the request form when the given key exists.","examples":["form key value"],"type":["string"]},{"description":"post_form {key} [{value}]\n\nWhen value is provided, match the request post form with the given key and value pattern. Otherwise, match the request post form when the given key exists.","examples":["post_form key value"],"type":["string"]},{"description":"host {host}\n\nMatch the request host with the given host pattern.","examples":["host example.com"],"type":"string"},{"description":"method {http_method}\n\nMatch the request method with the given method.","enum":["method GET","method POST","method PUT","method PATCH","method DELETE","method CONNECT","method HEAD","method OPTIONS","method TRACE"],"examples":["method GET"],"type":"string"},{"description":"path {glob_pattern}\n\nMatch the request path with the given path pattern.","examples":["path glob(/api/*)","path regex(/api/[^/]+)","path /exact"],"type":"string"},{"description":"remote {ip|cidr}\n\nMatch the request remote address with the given IP or CIDR.","examples":["remote 127.0.0.1"],"type":"string"},{"description":"route {alias}\n\nMatch the request route with the given alias pattern.","examples":["route immich","route regex(w+)"],"type":"string"},{"description":"basic_auth {username} {bcrypt_hashed_password}\n\nMatch the request basic authentication with the given username and bcrypt hashed password.","examples":["basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm"],"type":"string"},{"description":"status {status_code} status {status_code}-{status_code} status {1|2|3|4|5}xx\n\nMatch the request status code with the given status code.","examples":["status 404","status 200-300","status 2xx"],"type":"string"},{"description":"resp_header {key} [{value}]\n\nWhen value is provided, match the response header with the given key and value pattern. Otherwise, match the response header when the given key exists.","examples":["resp_header Content-Type","resp_header Content-Type application/json"],"type":["string"]}],"description":"Rule on","examples":["header Content-Type application/json","query key value","cookie key value","form key value","post_form key value","method GET","path glob(/api/*)","remote 127.0.0.1","route immich","basic_auth admin $2y$05$N3ZiFNDXVSMZ/OtcuSzGrOEBp15dqw6kQ9OJWvJSlgi9/zJ9LuCrm","rewrite / /index.html","serve /static","proxy http://localhost:8080","redirect https://example.com","redirect /index.html","error 404 \"Not Found\"","require_basic_auth \"Restricted Area\"","set headers Content-Type application/json","add headers Content-Type application/json","remove headers Content-Type","pass"]},"type":"array"},"use":{"type":"string"}},"required":["use"],"type":"object"}]},"type":"array"},"type":"object"}
