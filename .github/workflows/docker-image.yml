name: Docker Image CI

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      image_name:
        required: true
        type: string
      old_image_name:
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ inputs.image_name }}
  OLD_IMAGE_NAME: ${{ inputs.old_image_name }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
            variant: normal
            dockerfile: Dockerfile
            tag_suffix: ""
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            variant: normal
            dockerfile: Dockerfile
            tag_suffix: ""
          - runner: ubuntu-latest
            platform: linux/amd64
            variant: lite
            dockerfile: lite.Dockerfile
            tag_suffix: -lite
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            variant: lite
            dockerfile: lite.Dockerfile
            tag_suffix: -lite

    name: Build ${{ matrix.platform }} (${{ matrix.variant }})
    runs-on: ${{ matrix.runner }}

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${{ matrix.variant }}-${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.tag }}${{ matrix.tag_suffix }},event=branch
            type=raw,value=latest${{ matrix.tag_suffix }},event=branch
            type=ref,event=tag,suffix=${{ matrix.tag_suffix }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ env.PLATFORM_PAIR }}-${{ inputs.tag }}${{ matrix.tag_suffix }}
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ env.PLATFORM_PAIR }}-${{ inputs.tag }}${{ matrix.tag_suffix }},mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.variant }}-${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: normal
            tag_suffix: ""
          - variant: lite
            tag_suffix: -lite

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ inputs.tag }}${{ matrix.tag_suffix }},event=branch
            type=raw,value=latest${{ matrix.tag_suffix }},event=branch
            type=ref,event=tag,suffix=${{ matrix.tag_suffix }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        id: push
        working-directory: /tmp/digests
        run: |
          set -euo pipefail
          shopt -s nullglob

          variant="${{ matrix.variant }}"
          registry_image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          files=(${variant}-*)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No digests found for variant ${variant}"
            exit 1
          fi

          tag_args=()
          while IFS= read -r tag; do
            tag_args+=("-t" "$tag")
          done < <(jq -cr '.tags[]' <<< "$DOCKER_METADATA_OUTPUT_JSON")

          image_args=()
          for file in "${files[@]}"; do
            digest="${file#${variant}-}"
            image_args+=("${registry_image}@sha256:${digest}")
          done

          docker buildx imagetools create "${tag_args[@]}" "${image_args[@]}"

      - name: Old image name
        if: inputs.old_image_name != ''
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY }}/${{ env.OLD_IMAGE_NAME }}:${{ steps.meta.outputs.version }}\
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}

      - name: Inspect image (old)
        if: inputs.old_image_name != ''
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.OLD_IMAGE_NAME }}:${{ steps.meta.outputs.version }}
