name: Docker Image CI

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
      image_name:
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ inputs.image_name }}

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: ubuntu-latest
            platform: linux/amd64
            variant: normal
            dockerfile: Dockerfile
            tag: ${{ inputs.tag }}
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            variant: normal
            dockerfile: Dockerfile
            tag: ${{ inputs.tag }}
          - runner: ubuntu-latest
            platform: linux/amd64
            variant: lite
            dockerfile: lite.Dockerfile
            tag: ${{ inputs.tag }}-lite
          - runner: ubuntu-24.04-arm
            platform: linux/arm64
            variant: lite
            dockerfile: lite.Dockerfile
            tag: ${{ inputs.tag }}-lite

    name: Build ${{ matrix.platform }} (${{ matrix.variant }})
    runs-on: ${{ matrix.runner }}

    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${{ matrix.variant }}-${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta (normal)
        if: matrix.variant == 'normal'
        id: meta-normal
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.tag }},enable=${{ github.ref_type == 'branch' }}
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}

      - name: Docker meta (lite)
        if: matrix.variant == 'lite'
        id: meta-lite
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.tag }},enable=${{ github.ref_type == 'branch' }}
            type=ref,event=tag,suffix=-lite
            type=raw,value=latest-lite,enable=${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          file: ${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          labels: ${{ steps.meta-normal.outputs.labels || steps.meta-lite.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true,push=true
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ env.PLATFORM_PAIR }}-${{ matrix.tag }}
          cache-to: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache-${{ env.PLATFORM_PAIR }}-${{ matrix.tag }},mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${{ matrix.variant }}-${digest#sha256:}"

      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    needs: build
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - variant: normal
            tag: ${{ inputs.tag }}
          - variant: lite
            tag: ${{ inputs.tag }}-lite

    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker meta (normal)
        if: matrix.variant == 'normal'
        id: meta-normal
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.tag }},enable=${{ github.ref_type == 'branch' }}
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}

      - name: Docker meta (lite)
        if: matrix.variant == 'lite'
        id: meta-lite
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ matrix.tag }},enable=${{ github.ref_type == 'branch' }}
            type=ref,event=tag,suffix=-lite
            type=raw,value=latest-lite,enable=${{ github.ref_type == 'tag' && startsWith(github.ref_name, 'v') }}

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create manifest list and push
        id: push
        working-directory: /tmp/digests
        run: |
          set -euo pipefail
          shopt -s nullglob

          variant="${{ matrix.variant }}"
          registry_image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

          echo "=== Processing variant: ${variant} ==="
          ls -la

          files=(${variant}-*)
          if [ ${#files[@]} -eq 0 ]; then
            echo "No digests found for variant ${variant}"
            exit 1
          fi

          echo "Found ${#files[@]} digest(s) for variant ${variant}:"
          printf '%s\n' "${files[@]}"

          # Get tags from the appropriate meta step
          if [ "${variant}" = "normal" ]; then
            META_JSON='${{ steps.meta-normal.outputs.json }}'
          else
            META_JSON='${{ steps.meta-lite.outputs.json }}'
          fi

          tag_args=()
          while IFS= read -r tag; do
            echo "Adding tag: $tag"
            tag_args+=("-t" "$tag")
          done < <(jq -cr '.tags[]' <<< "$META_JSON")

          image_args=()
          for file in "${files[@]}"; do
            digest="${file#${variant}-}"
            image_args+=("${registry_image}@sha256:${digest}")
          done

          echo "=== Creating manifest with tags: ==="
          printf '%s\n' "${tag_args[@]}"

          docker buildx imagetools create "${tag_args[@]}" "${image_args[@]}"

      - name: Inspect image
        run: |
          VERSION="${{ steps.meta-normal.outputs.version || steps.meta-lite.outputs.version }}"
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
